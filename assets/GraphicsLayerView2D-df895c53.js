import{j as p,m as a,V as o,R as g,a as s,b as m,c as l}from"./index-91baa1df.js";import{f as c,d as n}from"./LayerView-913eee2d.js";import{i as d}from"./GraphicContainer-d51b6828.js";import{o as u}from"./GraphicsView2D-e30a0f31.js";import"./Container-6b05459b.js";import"./definitions-bb71f6e9.js";import"./enums-b14466b3.js";import"./Texture-71dee797.js";import"./color-b3edfb87.js";import"./enums-f1a6a48a.js";import"./VertexElementDescriptor-2925c6af.js";import"./BaseGraphicContainer-b9ef8118.js";import"./FeatureContainer-66fdf45d.js";import"./AttributeStoreView-18c46329.js";import"./TiledDisplayObject-3ff94922.js";import"./WGLContainer-b2307803.js";import"./VertexArrayObject-824b786b.js";import"./ProgramTemplate-bbade81d.js";import"./GeometryUtils-4a0dff77.js";import"./StyleDefinition-29c49b98.js";import"./config-1337d16e.js";import"./earcut-5bfe7e73.js";import"./visualVariablesUtils-3eab1408.js";import"./ExpandedCIM-7d2872c4.js";import"./BidiEngine-9a40f2f4.js";import"./GeometryUtils-984e8446.js";import"./utils-9266d497.js";import"./Rect-ea14f53a.js";import"./quantizationUtils-aafe47f6.js";import"./floatRGBA-9ee5d56d.js";import"./clusterUtils-3abc54c9.js";import"./util-d1c80de3.js";import"./TileContainer-6c79982f.js";import"./vec3f32-ad1dc57f.js";import"./normalizeUtilsSync-394f2cd1.js";import"./projectionSupport-6f6842fa.js";import"./json-48e3ea08.js";import"./Matcher-b6608979.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-e9fc89b3.js";import"./devEnvironmentUtils-5002a058.js";import"./webStyleSymbolUtils-4d23c203.js";import"./ComputedAttributeStorage-0e78c70a.js";import"./arcadeTimeUtils-f926e432.js";import"./executionError-c92d3b85.js";const w={remove(){},pause(){},resume(){}};let e=class extends c(n){constructor(){super(...arguments),this._highlightIds=new Map}attach(){this.graphicsView=new u({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this.layer.graphics,container:new d(this.view.featuresTilingScheme)}),this._updateHighlight(),this.container.addChild(this.graphicsView.container),this.addAttachHandles(this.layer.on("graphic-update",this.graphicsView.graphicUpdateHandler))}detach(){this.container.removeAllChildren(),this.graphicsView=p(this.graphicsView)}async hitTest(i){return this.graphicsView?this.graphicsView.hitTest(i).map(t=>({type:"graphic",graphic:t,mapPoint:i,layer:this.layer})):null}async fetchPopupFeatures(i){return this.graphicsView?this.graphicsView.hitTest(i).filter(t=>!!t.popupTemplate):[]}queryGraphics(){return Promise.resolve(this.graphicsView.graphics)}update(i){this.graphicsView.processUpdate(i)}moveStart(){}viewChange(){this.graphicsView.viewChange()}moveEnd(){}isUpdating(){return!this.graphicsView||this.graphicsView.updating}highlight(i){let t;typeof i=="number"?t=[i]:i instanceof a?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map(r=>r&&r.uid):o.isCollection(i)&&i.length>0&&(t=i.map(r=>r&&r.uid).toArray());const h=t==null?void 0:t.filter(g);return h!=null&&h.length?(this._addHighlight(h),{remove:()=>this._removeHighlight(h)}):w}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const h=this._highlightIds.get(t);this._highlightIds.set(t,h+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const h=this._highlightIds.get(t)-1;h===0?this._highlightIds.delete(t):this._highlightIds.set(t,h)}this._updateHighlight()}_updateHighlight(){var i;(i=this.graphicsView)==null||i.setHighlight(Array.from(this._highlightIds.keys()))}};s([m()],e.prototype,"graphicsView",void 0),e=s([l("esri.views.2d.layers.GraphicsLayerView2D")],e);const oi=e;export{oi as default};
