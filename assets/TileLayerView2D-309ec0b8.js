import{i as w,h as y,y as I,r as V,l as v,S as H,d as n,e as g,s as T,a as o,b as m,c as q}from"./index-7ada4a8b.js";import"./MagnifierPrograms-bf8e5287.js";import"./Container-85f02b1f.js";import"./BufferPool-d30293de.js";import"./color-61cb54a8.js";import"./WGLContainer-6aae9e60.js";import"./enums-b14466b3.js";import"./Texture-8088b5a1.js";import"./ProgramTemplate-745f40cf.js";import"./definitions-5c6882f5.js";import"./GeometryUtils-f5cc3f36.js";import"./VertexArrayObject-b4240d1b.js";import"./StyleDefinition-29c49b98.js";import"./enums-fb086c25.js";import"./OrderIndependentTransparency-309a1bc3.js";import"./floatRGBA-a3a22fc7.js";import"./testSVGPremultipliedAlpha-c841fcf9.js";import{o as U}from"./GraphicsView2D-599e8246.js";import"./AttributeStoreView-52b556a6.js";import"./earcut-163e0068.js";import"./vec3f32-ad1dc57f.js";import{t as S,o as f,n as d}from"./imageUtils-86b4cf8b.js";import{f as Q,d as b}from"./LayerView-658121e4.js";import{n as C}from"./HighlightGraphicContainer-112979b0.js";import{a as k}from"./RefreshableLayerView-c34c2399.js";import{S as F,U as R,r as G}from"./drapedUtils-9bf6aaec.js";import"./ExpandedCIM-c9c2384b.js";import"./BidiEngine-9a40f2f4.js";import"./GeometryUtils-984e8446.js";import"./enums-f1a6a48a.js";import"./utils-a0fce40c.js";import"./Rect-ea14f53a.js";import"./quantizationUtils-5410af88.js";import"./rasterizingUtils-dcba785d.js";import"./imageutils-7e8f4ddd.js";import"./Matcher-2a545f58.js";import"./visualVariablesUtils-71fa934c.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-8199c94a.js";import"./devEnvironmentUtils-5002a058.js";import"./webStyleSymbolUtils-afb4e2c0.js";import"./CircularArray-ef508845.js";import"./throttle-7bf02de9.js";import"./ComputedAttributeStorage-36ce071d.js";import"./arcadeTimeUtils-841d2092.js";import"./executionError-c92d3b85.js";import"./projectionSupport-193bef52.js";import"./json-48e3ea08.js";import"./VertexElementDescriptor-2925c6af.js";import"./config-1337d16e.js";import"./basicInterfaces-4ab7cc6a.js";import"./normalizeUtilsSync-5c3eb7bf.js";import"./TiledDisplayObject-622277b5.js";import"./clusterUtils-3c630442.js";import"./util-158b6951.js";import"./BitmapTileContainer-62ca81e2.js";import"./Bitmap-20e8006e.js";import"./TileContainer-743f464d.js";import"./BaseGraphicContainer-e29d28d4.js";import"./FeatureContainer-9535a4ab.js";import"./popupUtils-a3e22a56.js";const L=[0,0];let s=class extends k(S(Q(b))){constructor(){super(...arguments),this._fetchQueue=null,this._highlightGraphics=new w,this._highlightView=null,this._popupHighlightHelper=null,this._tileStrategy=null,this.layer=null}get resampling(){return!("resampling"in this.layer)||this.layer.resampling!==!1}get tilemapCache(){return"tilemapCache"in this.layer?this.layer.tilemapCache:null}update(e){var t;this._fetchQueue.pause(),this._fetchQueue.state=e.state,this._tileStrategy.update(e),this._fetchQueue.resume(),(t=this._highlightView)==null||t.processUpdate(e)}attach(){const e="tileServers"in this.layer?this.layer.tileServers:null,t=this.tilemapCache;if(this._tileInfoView=new y(this.layer.tileInfo,this.layer.fullExtent,t==null?void 0:t.effectiveMinLOD,t==null?void 0:t.effectiveMaxLOD),this._fetchQueue=new I({tileInfoView:this._tileInfoView,concurrency:e&&10*e.length||10,process:(i,r)=>this.fetchTile(i,r)}),this._tileStrategy=new V({cachePolicy:"keep",resampling:this.resampling,acquireTile:i=>this.acquireTile(i),releaseTile:i=>this.releaseTile(i),tileInfoView:this._tileInfoView}),F(this,this.layer)){const i=this._highlightView=new U({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new C(this.view.featuresTilingScheme),defaultPointSymbolEnabled:!1});this.container.addChild(this._highlightView.container),this._popupHighlightHelper=new R({createFetchPopupFeaturesQueryGeometry:(r,h)=>G(r,h,this.view),highlightGraphics:this._highlightGraphics,highlightGraphicUpdated:(r,h)=>{i.graphicUpdateHandler({graphic:r,property:h})},layerView:this,updatingHandles:this.updatingHandles})}this.requestUpdate(),this.addAttachHandles(v(()=>this.resampling,()=>{this.doRefresh()})),super.attach()}detach(){var e;super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),(e=this._popupHighlightHelper)==null||e.destroy(),this._fetchQueue=this._tileStrategy=this._tileInfoView=this._popupHighlightHelper=null}async fetchPopupFeatures(e,t){return this._popupHighlightHelper?this._popupHighlightHelper.fetchPopupFeatures(e,t):[]}highlight(e){return this._popupHighlightHelper?this._popupHighlightHelper.highlight(e):{remove(){}}}moveStart(){this.requestUpdate()}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(e){var t;return H((t=this.layer.tileInfo)==null?void 0:t.spatialReference,e)}async doRefresh(){!this.attached||this.updateRequested||this.suspended||(this._fetchQueue.reset(),this._tileStrategy.refresh(e=>this._enqueueTileFetch(e)))}isUpdating(){var e;return((e=this._fetchQueue)==null?void 0:e.updating)??!1}acquireTile(e){const t=this._bitmapView.createTile(e),i=t.bitmap;return[i.x,i.y]=this._tileInfoView.getTileCoords(L,t.key),i.resolution=this._tileInfoView.getTileResolution(t.key),[i.width,i.height]=this._tileInfoView.tileInfo.size,this._enqueueTileFetch(t),this._bitmapView.addChild(t),this.requestUpdate(),t}releaseTile(e){this._fetchQueue.abort(e.key.id),this._bitmapView.removeChild(e),e.once("detach",()=>e.destroy()),this.requestUpdate()}async fetchTile(e,t={}){const i=this.tilemapCache,{signal:r,resamplingLevel:h=0}=t;if(!i)try{return await this._fetchImage(e,r)}catch(a){if(!n(a)&&!this.resampling)return f(this._tileInfoView.tileInfo.size);if(h<3){const u=this._tileInfoView.getTileParentId(e.id);if(u){const c=new g(u),_=await this.fetchTile(c,{...t,resamplingLevel:h+1});return d(this._tileInfoView,_,c,e)}}throw a}const l=new g(0,0,0,0);let p;try{if(await i.fetchAvailabilityUpsample(e.level,e.row,e.col,l,{signal:r}),l.level!==e.level&&!this.resampling)return f(this._tileInfoView.tileInfo.size);p=await this._fetchImage(l,r)}catch(a){if(n(a))throw a;p=await this._fetchImage(e,r)}return this.resampling?d(this._tileInfoView,p,l,e):p}async _enqueueTileFetch(e){if(!this._fetchQueue.has(e.key.id)){try{const t=await this._fetchQueue.push(e.key);e.bitmap.source=t,e.bitmap.width=this._tileInfoView.tileInfo.size[0],e.bitmap.height=this._tileInfoView.tileInfo.size[1],e.requestRender(),e.once("attach",()=>this.requestUpdate())}catch(t){n(t)||T.getLogger(this).error(t)}this.requestUpdate()}}async _fetchImage(e,t){return this.layer.fetchImageBitmapTile(e.level,e.row,e.col,{signal:t})}};o([m()],s.prototype,"_fetchQueue",void 0),o([m()],s.prototype,"resampling",null),o([m()],s.prototype,"tilemapCache",null),s=o([q("esri.views.2d.layers.TileLayerView2D")],s);const Me=s;export{Me as default};
