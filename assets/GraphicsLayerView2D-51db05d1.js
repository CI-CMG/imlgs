import{j as p,m as a,V as o,R as g,a as s,b as m,c as l}from"./index-c7ff1b65.js";import{f as c,d as n}from"./LayerView-01f4fea4.js";import{i as d}from"./GraphicContainer-abc68c72.js";import{o as u}from"./GraphicsView2D-b97817cc.js";import"./Container-a25db51f.js";import"./definitions-953e0186.js";import"./enums-b14466b3.js";import"./Texture-8ececbac.js";import"./color-8ccfbfb8.js";import"./enums-f1a6a48a.js";import"./VertexElementDescriptor-2925c6af.js";import"./BaseGraphicContainer-faaf058e.js";import"./FeatureContainer-f712ac24.js";import"./AttributeStoreView-50350e43.js";import"./TiledDisplayObject-030ca40e.js";import"./WGLContainer-d737e922.js";import"./VertexArrayObject-d6f94787.js";import"./ProgramTemplate-ad6b47f5.js";import"./GeometryUtils-b1438083.js";import"./StyleDefinition-29c49b98.js";import"./config-1337d16e.js";import"./earcut-994046fe.js";import"./visualVariablesUtils-511bc2fe.js";import"./ExpandedCIM-61f541a3.js";import"./BidiEngine-9a40f2f4.js";import"./GeometryUtils-984e8446.js";import"./utils-aefa81e2.js";import"./Rect-ea14f53a.js";import"./quantizationUtils-88412da3.js";import"./floatRGBA-3aa99d53.js";import"./clusterUtils-f91eea50.js";import"./util-c4503251.js";import"./TileContainer-eb5140ba.js";import"./vec3f32-ad1dc57f.js";import"./normalizeUtilsSync-ba6d1166.js";import"./projectionSupport-da4d3cee.js";import"./json-48e3ea08.js";import"./Matcher-69f062c5.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-de1db8fc.js";import"./devEnvironmentUtils-5002a058.js";import"./webStyleSymbolUtils-cf6e2eb7.js";import"./ComputedAttributeStorage-1a7cde94.js";import"./arcadeTimeUtils-a95af63a.js";import"./executionError-c92d3b85.js";const w={remove(){},pause(){},resume(){}};let e=class extends c(n){constructor(){super(...arguments),this._highlightIds=new Map}attach(){this.graphicsView=new u({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this.layer.graphics,container:new d(this.view.featuresTilingScheme)}),this._updateHighlight(),this.container.addChild(this.graphicsView.container),this.addAttachHandles(this.layer.on("graphic-update",this.graphicsView.graphicUpdateHandler))}detach(){this.container.removeAllChildren(),this.graphicsView=p(this.graphicsView)}async hitTest(i){return this.graphicsView?this.graphicsView.hitTest(i).map(t=>({type:"graphic",graphic:t,mapPoint:i,layer:this.layer})):null}async fetchPopupFeatures(i){return this.graphicsView?this.graphicsView.hitTest(i).filter(t=>!!t.popupTemplate):[]}queryGraphics(){return Promise.resolve(this.graphicsView.graphics)}update(i){this.graphicsView.processUpdate(i)}moveStart(){}viewChange(){this.graphicsView.viewChange()}moveEnd(){}isUpdating(){return!this.graphicsView||this.graphicsView.updating}highlight(i){let t;typeof i=="number"?t=[i]:i instanceof a?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map(r=>r&&r.uid):o.isCollection(i)&&i.length>0&&(t=i.map(r=>r&&r.uid).toArray());const h=t==null?void 0:t.filter(g);return h!=null&&h.length?(this._addHighlight(h),{remove:()=>this._removeHighlight(h)}):w}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const h=this._highlightIds.get(t);this._highlightIds.set(t,h+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const h=this._highlightIds.get(t)-1;h===0?this._highlightIds.delete(t):this._highlightIds.set(t,h)}this._updateHighlight()}_updateHighlight(){var i;(i=this.graphicsView)==null||i.setHighlight(Array.from(this._highlightIds.keys()))}};s([m()],e.prototype,"graphicsView",void 0),e=s([l("esri.views.2d.layers.GraphicsLayerView2D")],e);const oi=e;export{oi as default};
