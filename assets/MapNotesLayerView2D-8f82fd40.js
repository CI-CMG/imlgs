import{m as u,V as f,R as w,l as o,f as p,w as y,a as _,c as V}from"./index-79938705.js";import{h as v}from"./Container-420fc4ea.js";import{r as C}from"./GroupContainer-8f806ae8.js";import{f as H,d as b}from"./LayerView-813b6fde.js";import{i as c}from"./GraphicContainer-2e6448f3.js";import{o as g}from"./GraphicsView2D-81ba9307.js";import"./definitions-f79f84bd.js";import"./enums-b14466b3.js";import"./Texture-52c80f52.js";import"./WGLContainer-d354679a.js";import"./VertexArrayObject-a4255dbc.js";import"./VertexElementDescriptor-2925c6af.js";import"./color-396e7b65.js";import"./enums-f1a6a48a.js";import"./ProgramTemplate-c78f464c.js";import"./GeometryUtils-d5c96bdf.js";import"./StyleDefinition-29c49b98.js";import"./config-1337d16e.js";import"./earcut-2ed7a7f7.js";import"./BaseGraphicContainer-35f0f2de.js";import"./FeatureContainer-2f8b8725.js";import"./AttributeStoreView-6e116e81.js";import"./TiledDisplayObject-f584107d.js";import"./visualVariablesUtils-717cbff2.js";import"./ExpandedCIM-037237f1.js";import"./BidiEngine-9a40f2f4.js";import"./GeometryUtils-984e8446.js";import"./utils-ba6129a5.js";import"./Rect-ea14f53a.js";import"./quantizationUtils-6b0651a9.js";import"./floatRGBA-773615de.js";import"./clusterUtils-4700bd9f.js";import"./util-c022236c.js";import"./TileContainer-ad4873a1.js";import"./vec3f32-ad1dc57f.js";import"./normalizeUtilsSync-8b6d3fb0.js";import"./projectionSupport-5018176b.js";import"./json-48e3ea08.js";import"./Matcher-14a328f8.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-09f55174.js";import"./devEnvironmentUtils-5002a058.js";import"./webStyleSymbolUtils-be8229de.js";import"./ComputedAttributeStorage-3575a4f7.js";import"./arcadeTimeUtils-ce40b737.js";import"./executionError-c92d3b85.js";const m="sublayers",n="layerView",T=Object.freeze({remove(){},pause(){},resume(){}});let l=class extends H(b){constructor(){super(...arguments),this._highlightIds=new Map,this.container=new C}async fetchPopupFeatures(i){return Array.from(this.graphicsViews(),t=>t.hitTest(i).filter(e=>!!e.popupTemplate)).flat()}*graphicsViews(){this._graphicsViewsFeatureCollectionMap==null?this._graphicsViews==null?yield*[]:yield*this._graphicsViews:yield*this._graphicsViewsFeatureCollectionMap.keys()}async hitTest(i,t){return Array.from(this.graphicsViews(),e=>{const s=e.hitTest(i);if(this._graphicsViewsFeatureCollectionMap!=null){const h=this._graphicsViewsFeatureCollectionMap.get(e);for(const r of s)!r.popupTemplate&&h.popupTemplate&&(r.popupTemplate=h.popupTemplate),r.sourceLayer=r.layer=this.layer}return s}).flat().map(e=>({type:"graphic",graphic:e,layer:this.layer,mapPoint:i}))}highlight(i){let t;typeof i=="number"?t=[i]:i instanceof u?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map(s=>s&&s.uid):f.isCollection(i)&&(t=i.map(s=>s&&s.uid).toArray());const e=t==null?void 0:t.filter(w);return e!=null&&e.length?(this._addHighlight(e),{remove:()=>{this._removeHighlight(e)}}):T}update(i){for(const t of this.graphicsViews())t.processUpdate(i)}attach(){const i=this.view,t=()=>this.requestUpdate(),e=this.layer.featureCollections;if(e!=null&&e.length){this._graphicsViewsFeatureCollectionMap=new Map;for(const s of e){const h=new c(this.view.featuresTilingScheme),r=new g({view:i,graphics:s.source,renderer:s.renderer,requestUpdateCallback:t,container:h});this._graphicsViewsFeatureCollectionMap.set(r,s),this.container.addChild(r.container),this.addHandles([o(()=>s.visible,a=>r.container.visible=a,p),o(()=>r.updating,()=>this.notifyChange("updating"),p)],n)}this._updateHighlight()}else this.layer.sublayers!=null&&this.addHandles(y(()=>this.layer.sublayers,"change",()=>this._createGraphicsViews(),{onListenerAdd:()=>this._createGraphicsViews(),onListenerRemove:()=>this._destroyGraphicsViews()}),m)}detach(){this._destroyGraphicsViews(),this.removeHandles(m)}moveStart(){}moveEnd(){}viewChange(){for(const i of this.graphicsViews())i.viewChange()}isUpdating(){for(const i of this.graphicsViews())if(i.updating)return!0;return!1}_destroyGraphicsViews(){this.container.removeAllChildren(),this.removeHandles(n);for(const i of this.graphicsViews())i.destroy();this._graphicsViews=null,this._graphicsViewsFeatureCollectionMap=null}_createGraphicsViews(){if(this._destroyGraphicsViews(),this.layer.sublayers==null)return;const i=[],t=this.view,e=()=>this.requestUpdate();for(const s of this.layer.sublayers){const h=new v,r=new c(this.view.featuresTilingScheme);r.fadeTransitionEnabled=!0;const a=new g({view:t,graphics:s.graphics,requestUpdateCallback:e,container:r});this.addHandles([s.on("graphic-update",a.graphicUpdateHandler),o(()=>s.visible,d=>a.container.visible=d,p),o(()=>a.updating,()=>this.notifyChange("updating"),p)],n),h.addChild(a.container),this.container.addChild(h),i.push(a)}this._graphicsViews=i,this._updateHighlight()}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t);this._highlightIds.set(t,e+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t)-1;e===0?this._highlightIds.delete(t):this._highlightIds.set(t,e)}this._updateHighlight()}_updateHighlight(){const i=Array.from(this._highlightIds.keys());for(const t of this.graphicsViews())t.setHighlight(i)}};l=_([V("esri.views.2d.layers.MapNotesLayerView2D")],l);const yi=l;export{yi as default};
